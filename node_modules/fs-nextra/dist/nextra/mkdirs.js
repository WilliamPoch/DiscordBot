"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const util_1 = require("../utils/util");
const fs_1 = require("../fs");
/**
 * Recursively makes directories, until the directory passed exists.
 * @function ensureDir
 * @memberof fsn/nextra
 * @param path The path you wish to make
 * @param options Options for making the directories
 */
/**
 * Recursively makes directories, until the directory passed exists.
 * @function mkdirp
 * @memberof fsn/nextra
 * @param path The path you wish to make
 * @param options Options for making the directories
 */
/**
 * Recursively makes directories, until the directory passed exists.
 * @function mkdirs
 * @memberof fsn/nextra
 * @param path The path you wish to make
 * @param options Options for making the directories
 */
async function mkdirs(path, options) {
    const dirOptions = resolveOptions(options);
    // Windows
    /* istanbul ignore next */
    if (util_1.isWindows && invalidWin32Path(path)) {
        const errInval = new Error(`FS-NEXTRA: ${path} contains invalid WIN32 path characters.`);
        // @ts-ignore
        errInval.code = 'EINVAL';
        throw errInval;
    }
    path = path_1.resolve(path);
    try {
        await fs_1.mkdir(path, dirOptions.mode);
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            await mkdirs(path_1.dirname(path), dirOptions);
            await mkdirs(path, dirOptions);
            return;
        }
        const myStat = await fs_1.stat(path);
        if (myStat.isDirectory())
            return;
        throw err;
    }
}
exports.default = mkdirs;
const resolveOptions = (options = {}) => {
    return {
        mode: typeof options === 'number' ? options : options.mode || 0o0777 & ~process.umask()
    };
};
// Windows
/* istanbul ignore next */
const invalidWin32Path = (myPath) => {
    const root = path_1.normalize(path_1.resolve(myPath)).split(path_1.sep);
    const rp = root.length > 0 ? root[0] : null;
    return /[<>:"|?*]/.test(myPath.replace(rp, ''));
};
//# sourceMappingURL=mkdirs.js.map