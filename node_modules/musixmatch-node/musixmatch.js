const fetch = require('node-fetch')

class Musixmatch {
  constructor(key) {
    this.apikey = key
    this.domain = 'https://api.musixmatch.com/ws/1.1'
  }

  request(route, query) {
    const url = this.domain 
                + route 
                + this.toQuery(query)

    return fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'text/plain',
      },
    })
    .then(req => req.text())
    .then(data => {
      const getJSON = (obj) => obj
      return eval(data)
    })
    .catch(err => {
      throw new Error(err)
    })
  }

  toQuery(obj) {
    if (!obj) return ''

    obj.format = 'jsonp'
    obj.callback = 'getJSON'
    obj.apikey = this.apikey

    return '?' + Object.keys(obj).map(k => {
      return `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`
    }).join('&')
  }

  /*** TRACKS ***/
  getTrackMatcher(query) {
    return this.request(
      '/matcher.track.get',
      query
    )
  }

  getTrack(track_id) {
    return this.request(
      '/track.get',
      { track_id }
    )
  }

  searchTrack(query) {
    return this.request(
      '/track.search',
      query
    )
  }

  getTracksChart(query) {
    return this.request(
      '/chart.tracks.get',
      query
    )
  }

  /*** ARTIST ***/
  getArtist(artist_id) {
    return this.request(
      '/artist.get',
      { artist_id }
    )
  }

  getArtistsChart(query) {
    return this.request(
      '/chart.artists.get',
      query
    )
  }

  searchArtist(query) {
    return this.request(
      '/artist.search',
      query
    )
  }

  getArtistAlbums(query) {
    return this.request(
      '/artist.albums.get',
      query
    )
  }

  getRelatedArtists(query) {
    return this.request(
      '/artist.related.get',
      query
    )
  }

  /*** ALBUMS ***/
  getAlbum(album_id) {
    return this.request(
      '/album.get',
      { album_id }
    )
  }

  getAlbumTracks(query) {
    return this.request(
      '/album.tracks.get',
      query
    )
  }

  /*** LYRICS ***/
  getTrackLyrics(track_id) {
    return this.request(
      '/track.lyrics.get',
      { track_id }
    )
  }

  getLyricsMatcher(query) {
    return this.request(
      '/matcher.lyrics.get',
      query
    )
  }

  translateTrackLyrics(query) {
    return this.request(
      '/track.lyrics.translation.get',
      query
    )
  }

  /*** SNIPPETS ***/
  getTrackSnippet(track_id) {
    return this.request(
      '/track.snippet.get',
      { track_id }
    )
  }

  /*** SUBTITLES ***/
  getTrackSubtitle(query) {
    return this.request(
      '/track.subtitle.get',
      query
    )
  }
}


module.exports = Musixmatch